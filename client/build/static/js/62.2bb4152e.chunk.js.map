{"version":3,"file":"static/js/62.2bb4152e.chunk.js","mappings":"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","sources":["Common/services/sortFilterPageService.js","Components/HomeComponents/FilterSectionComponents/MainSearchButton.jsx","Common/services/resetDataService.js","Components/HomeComponents/FilterSectionComponents/ResetDataButton.jsx","Components/HomeComponents/FilterSectionComponents/FilterSection.jsx","Common/services/changePagesService.js","Components/HomeComponents/ListingsSectionComponents/PageToggleButton.jsx","Common/services/deleteSingleListingService.js","Components/HomeComponents/ListingsSectionComponents/DeleteButton.jsx","Components/HomeComponents/ListingsSectionComponents/SortDropdown.jsx","Common/services/editListingService.js","Components/HomeComponents/ListingsSectionComponents/EditListing.jsx","Components/HomeComponents/ListingsSectionComponents/ListingsSection.jsx","Common/services/addNewListingService.js","Components/HomeComponents/NewListing.jsx","Pages/Home.jsx"],"sourcesContent":["import { runInAction } from \"mobx\";\nimport callApi from \"../utils/callApi\";\n\nexport default async function handleSortFilterAndPages(rootStore) {\n  const { resetDefaultPage, params, sortData  } = rootStore.sortFilterPagingStore;\n  const { getFilteredData } = rootStore.dataStore;\n  const { token } = rootStore.tokenStore;\n  let query = `?page=1&rpp=12`;\n  if (sortData) {\n    query = query + `&sort=${sortData}`;\n  }\n  try {\n    const result = await callApi(token, \"GET\", {}, query, params);\n    const data = await result.data;\n    runInAction(() => {\n      getFilteredData(data);\n    });\n    resetDefaultPage();\n  } catch (error) {\n    console.log(`Error: ${error}`);\n  }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { RootContext } from \"../../../Stores/RootStore\";\nimport handleSortFilterAndPages from \"../../../Common/services/sortFilterPageService\";\n\nconst MainSearchButton = () => {\nconst rootStore = React.useContext(RootContext);\n\n  return (\n    <>\n      <button className=\"btn btn-dark me-5 search-button\" onClick={()=>{handleSortFilterAndPages(rootStore)}}>\n        Search\n      </button>\n    </>\n  )\n}\n\nexport default observer(MainSearchButton);\n\n","export default async function resetData(rootStore) {\n  const { resetDefaultPage, resetFilterState, resetSortData } = rootStore.sortFilterPagingStore;\n  const { getCarData } = rootStore.dataStore;\n  const { token } = rootStore.tokenStore;\n  try {\n    resetSortData();\n    resetFilterState();\n    resetDefaultPage();\n    getCarData(token);\n  } catch (error) {\n    console.log(`Error: ${error}`);\n  }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { RootContext } from \"../../../Stores/RootStore\";\nimport resetData from \"../../../Common/services/resetDataService\";\n\nconst ResetDataButton = () => {\n  const rootStore = React.useContext(RootContext);\n\n  return (\n    <>\n      <button className=\"btn btn-light ms-5\" onClick={()=>{resetData(rootStore)}}>\n        Reset Filters\n      </button>\n    </>\n  );\n};\n\nexport default observer(ResetDataButton);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { RootContext } from \"../../../Stores/RootStore\";\nimport MainSearchButton from \"./MainSearchButton\";\nimport ResetDataButton from \"./ResetDataButton\";\nimport \"./filterSection.css\";\n\nconst FilterSection = () => {\n  //Import relevant context\n  const rootStore = React.useContext(RootContext);\n  const { filterData, setFilterData, makeParams } =\n    rootStore.sortFilterPagingStore;\n\n  //Category specific information (for schema properties)\n  const filterCategories = [\n    {\n      name: \"car\",\n      labelText: \"Which brand are you looking for?\",\n      labelPlaceholder: \"Volkswagen\",\n    },\n    {\n      name: \"car_model\",\n      labelText: \"Which car model would you like to see?\",\n      labelPlaceholder: \"Golf 4\",\n    },\n    {\n      name: \"car_model_year\",\n      labelText: \"Which model year?\",\n      labelPlaceholder: \"2000\",\n    },\n    {\n      name: \"car_color\",\n      labelText: \"Any particular color?\",\n      labelPlaceholder: \"Navy Blue\",\n    },\n  ];\n\n  //SearchQuery Handling\n  function handleData(e) {\n    const prop = e.target.name;\n    const value = e.target.value;\n    setFilterData(prop, value);\n    makeParams();\n  }\n\n  return (\n    <div className=\"browse-buttons-container\">\n      <span className=\"lead\">Filter:</span>\n      <div className=\"browseButtonsContainer\">\n        {filterCategories.map((category) => {\n          return (\n            <div key={category.name}>\n              <div className=\"form-floating mb-3\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"floatingInput\"\n                  placeholder={category.labelPlaceholder}\n                  name={category.name}\n                  value={filterData[category.name]}\n                  onChange={handleData}\n                />\n                <label htmlFor=\"floatingInput\">{category.labelText}</label>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <MainSearchButton />\n      <ResetDataButton />\n    </div>\n  );\n};\n\nexport default observer(FilterSection);\n","import { runInAction } from \"mobx\";\nimport callApi from \"../utils/callApi\";\n\nexport default async function changePages(rootStore) {\n  const { setPreviousPage, page, params, sortData } = rootStore.sortFilterPagingStore;\n  const { getFilteredData } = rootStore.dataStore;\n  const { token } = rootStore.tokenStore;\n\n  let query = `?page=${page}&rpp=12`;\n  if (sortData) {\n    query = query + `&sort=${sortData}`;\n  }\n\n  try {\n    const response = await callApi(token, \"GET\", {}, query, params);\n    const data = await response.data;\n    if (!data.item.length) {\n      setPreviousPage();\n      return;\n    }\n    runInAction(() => {\n      getFilteredData(data);\n    })\n  } catch (error) {\n    console.log(`Error: ${error}`);\n  }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { RootContext } from \"../../../Stores/RootStore\";\nimport changePages from \"../../../Common/services/changePagesService\";\nimport \"./pageToggleButton.css\";\n\nconst PageToggleButton = () => {\n  const rootStore = React.useContext(RootContext);\n  const {setPreviousPage, setNextPage, page} = rootStore.sortFilterPagingStore;\n\n  return (\n    <div className=\"pagination-section\">\n      <button\n        className=\"btn btn-light\"\n        onClick={() => {\n          setPreviousPage();\n          changePages(rootStore);\n        }}\n      >\n        Previous Page\n      </button>\n      <span className=\"currentPage page-link\">{page}</span>\n      <button\n        className=\"btn btn-light\"\n        onClick={() => {\n          setNextPage();\n          changePages(rootStore);\n        }}\n      >\n        Next Page\n      </button>\n    </div>\n  )\n}\n\nexport default observer(PageToggleButton);\n","import callApi from \"../utils/callApi\";\n\nexport default async function deleteSingleListing(rootStore, carId) {\n  const { token } = rootStore.tokenStore;\n  const { getCarData } = rootStore.dataStore;\n  const { resetDefaultPage, resetFilterState, resetSortData } = rootStore.sortFilterPagingStore;\n  const query = `/${carId}`;\n  try {\n    const response = await callApi(token, \"DELETE\", {}, query, {});\n    getCarData(token);\n    resetDefaultPage();\n    resetFilterState();\n    resetSortData();\n    if(response.status === 204) {\n      alert(\"You have deleted selected listing!\")\n    }\n  } catch (error) {\n    console.log(`Error: ${error}`);\n  }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { RootContext } from \"../../../Stores/RootStore\";\nimport deleteSingleListing from \"../../../Common/services/deleteSingleListingService\";\nimport \"./listingsSection.css\";\n\nconst DeleteButton = (props) => {\n  const rootStore = React.useContext(RootContext);\n  const carId = props.id;\n  return (\n    <>\n      <button\n        className=\"btn btn-light btn-sm edit-btn\"\n        onClick={() => {\n          deleteSingleListing(rootStore, carId)\n        }}\n      >\n        <span className=\"material-symbols-outlined btn-symbol\">delete</span>\n      </button>\n    </>\n  )\n}\n\nexport default observer(DeleteButton);\n","import { observer } from \"mobx-react\";\n\nconst SortDropdown = (props) => {\nreturn (\n    <div className=\"sorting-section\">\n<span className=\"lead\">Sort by:</span>\n<select\n  className=\"form-select form-select-sm sort-container\"\n  aria-label=\"Default select\"\n  onChange={props.setSortValue}\n  value={props.sortData}\n>\n  <option value={\"\"}>{null}</option>\n  <option value=\"price|asc\">Price (Lowest to Highest)</option>\n  <option value=\"price|desc\">Price (Highest to Lowest)</option>\n</select>\n</div>\n)\n}\n\nexport default observer(SortDropdown);\n","import callApi from \"../utils/callApi\";\n\nexport default async function editListing(rootStore, carEditInput, carId) {\n  const { token } = rootStore.tokenStore;\n  const { getCarData } = rootStore.dataStore;\n  const { resetDefaultPage, resetFilterState, resetSortData } = rootStore.sortFilterPagingStore;\n  const query = `/${carId}`;\n  try {\n    const response = await callApi(token, \"PUT\", carEditInput, query, {});\n    getCarData(token);\n    resetDefaultPage();\n    resetFilterState();\n    resetSortData();\n    if(response.status === 204) {\n      alert(\"You have succesfully edited the listing!\")\n    }\n    console.log(response)\n  } catch (error) {\n    console.log(`Error: ${error}`);\n  }\n}\n","import React, { useState } from \"react\";\nimport { RootContext } from \"../../../Stores/RootStore\";\nimport editListing from \"../../../Common/services/editListingService\";\nimport \"./listingsSection.css\";\n\nconst EditListing = (props) => {\n  const carId = props.id;\n  const rootStore = React.useContext(RootContext);\n  //Local state to toggle edit content\n  const [editIsOpened, setEditIsOpened] = useState(false);\n  function toggleListingWindow() {\n    setEditIsOpened(!editIsOpened);\n  }\n\n  //State to track users edits\n  let carData = {\n    id: carId,\n    car: props.car,\n    price: props.price,\n    car_color: props.car_color,\n    car_model: props.car_model,\n    car_model_year: props.car_model_year,\n    car_vin: props.car_vin,\n    availability: props.availability,\n    date_added: props.date_added,\n  }\n\n  const [carEditInput, setCarEditInput] = useState(carData)\n  function handleInput(e) {\n    if (e.target.name === \"car_model_year\") {\n      let a = Number(e.target.value)\n      setCarEditInput({ ...carEditInput, [e.target.name]: a})  \n    } else {\n      setCarEditInput({ ...carEditInput, [e.target.name]: e.target.value });\n    }\n  }\n\n  return (\n    <>\n        <button\n          className=\"btn btn-light btn-sm ms-5 edit-btn\"\n          onClick={toggleListingWindow}\n        >\n          <span className=\"material-symbols-outlined btn-symbol\">edit</span>\n        </button>\n      {editIsOpened && (\n        <div className=\"editing-container\">\n          <button onClick={toggleListingWindow}>x</button>\n          <h2 className=\"edit-main-text\">Edit your car listing</h2>\n          <div className=\"new-listing-form\">\n            <label>Your car brand:</label>\n            <input\n              name=\"car\"\n              type=\"text\"\n              className=\"form-control\"\n              value={carEditInput.car}\n              onChange={handleInput}\n            ></input>\n            <label>Your car model:</label>\n            <input\n              name=\"car_model\"\n              type=\"text\"\n              className=\"form-control\"\n              value={carEditInput.car_model}\n              onChange={handleInput}\n            ></input>\n            <label>Your car model year:</label>\n            <input\n            \n              name=\"car_model_year\"\n              type=\"text\"\n              className=\"form-control\"\n              value={carEditInput.car_model_year}\n              onChange={handleInput}\n            ></input>\n            <label>Your car color:</label>\n            <input\n              name=\"car_color\"\n              type=\"text\"\n              className=\"form-control\"\n              value={carEditInput.car_color}\n              onChange={handleInput}\n            ></input>\n            <label>Your car price:</label>\n            <input\n              name=\"price\"\n              type=\"text\"\n              className=\"form-control\"\n              value={carEditInput.price}\n              onChange={handleInput}\n            ></input>\n            <button className=\"update-btn\"\n              onClick={() => {\n                toggleListingWindow(),\n                  editListing(rootStore, carEditInput, carId);\n              }}\n            >\n              Edit\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default EditListing;\n","import React, { useEffect } from \"react\";\nimport PageToggleButton from \"./PageToggleButton\";\nimport DeleteButton from \"./DeleteButton\";\nimport SortDropdown from \"./SortDropdown\";\nimport EditListing from \"./EditListing\";\nimport { observer } from \"mobx-react\";\nimport { RootContext } from \"../../../Stores/RootStore\";\nimport {Link} from \"react-router-dom\";\nimport \"./listingsSection.css\";\n\n\nconst ListingsSection = () => {\n  //Import relevant context\n  const rootStore = React.useContext(RootContext);\n  const {getCarData, carData} = rootStore.dataStore;\n  const {setSortData, sortData} = rootStore.sortFilterPagingStore;\n  const {token} = rootStore.tokenStore\n\n  //Fetch initial car data and save it to global state\n  useEffect(() => {\n    getCarData(token);\n  }, [] )\n\n  //Function for setting sort state\n  function setSortValue(e) {\n    const { value } = e.target;\n    setSortData(value);\n  }\n\n    return (\n      <div className=\"data-container\">\n       <SortDropdown sortData={sortData} setSortValue={setSortValue}/>\n        <div className=\"card-container\">\n          {carData !== undefined && carData.item ? (\n            carData.item.map((elem) => {\n              return (\n                <div className=\"card car-card\" key={elem.id}>\n                  <div className=\"link-and-delete-btn\">\n                  <Link to={`/singleListing/${elem.id}`}>More Info</Link>\n                  <EditListing {...elem}/>\n                  <DeleteButton {...elem}/>\n                  </div>\n                  <span className=\"material-symbols-outlined\">car_rental</span>\n                  <div className=\"card-body\">\n                    <h4 className=\"card-title\">{elem.car}</h4>\n                    <ul className=\"list-group list-group-flush\">\n                      <li className=\"list-group-item\">{elem.car_model}</li>\n                      <li className=\"list-group-item\">{elem.car_model_year}</li>\n                      <li className=\"list-group-item\">{elem.car_color}</li>\n                      <li className=\"list-group-item price-text\">{elem.price}</li>\n                    </ul>\n                  </div>\n                </div>\n              );\n            })\n          ) : (\n            <div className=\"spinner\">\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n          )}\n        </div>\n        <PageToggleButton />\n      </div>\n    )\n}\n\nexport default observer(ListingsSection);\n","import callApi from \"../utils/callApi\";\n\nexport default async function addNewListing(rootStore, carInput) {\n  const { token } = rootStore.tokenStore;\n  const { getCarData } = rootStore.dataStore;\n  try {\n    const response = await callApi(token, \"POST\", carInput, \"\", {});\n    getCarData(token);\n    if(response.status === 201) {\n      alert(\"Your listing has been succesfully created!\");\n    }\n  } catch (error) {\n    console.log(`Error: ${error}`);\n  }\n}","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { RootContext } from \"../../Stores/RootStore\";\nimport addNewListing from \"../../Common/services/addNewListingService\";\nimport \"./newListing.css\";\n\nconst NewListing = () => {\n  const rootStore = React.useContext(RootContext);\n  //Local state for toggling content for creating new listing\n  const [windowIsOpened, setwindowIsOpened] = useState(false);\n  function toggleListingWindow() {\n    setwindowIsOpened(!windowIsOpened);\n  }\n\n  //Local state for storing users input values for new listing\n  const [carInput, setCarInput] = useState({\n    car: \"\",\n    price: \"\",\n    car_color: \"\",\n    car_model: \"\",\n    car_model_year: 0,\n    car_vin: \"test\",\n    availability: true,\n    date_added: \"10th\",\n  });\n\n  function handleInput(e) {\n    let { name, value } = e.target;\n    if (name === \"car_model_year\") {\n      value = Number(value);\n    }\n    setCarInput({ ...carInput, [name]: value });\n  }\n\n  return (\n    <>\n      <button\n        className=\"btn btn-light me-5 add-btn\"\n        data-bs-toggle=\"modal\"\n        data-bs-target=\"#staticBackdrop\"\n        onClick={toggleListingWindow}\n      >\n        Add New Listing\n      </button>\n      {windowIsOpened && (\n        <div\n          className=\"modal fade\"\n          id=\"staticBackdrop\"\n          data-bs-backdrop=\"static\"\n          data-bs-keyboard=\"false\"\n          tabIndex=\"-1\"\n          aria-labelledby=\"staticBackdropLabel\"\n          aria-hidden=\"true\"\n        >\n          <div className=\"modal-dialog\">\n            <div className=\"modal-content\">\n              <div className=\"modal-header\">\n                <h1 className=\"modal-title fs-5\" id=\"staticBackdropLabel\">\n                  Create your car listing\n                </h1>\n                <button\n                  type=\"button\"\n                  className=\"btn-close\"\n                  data-bs-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                  onClick={toggleListingWindow}\n                ></button>\n              </div>\n              <div className=\"modal-body\">\n                <div className=\"new-listing-form\">\n                  <label>Your car brand:</label>\n                  <input\n                    name=\"car\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={carInput.car}\n                    onChange={handleInput}\n                  ></input>\n                  <label>Your car model:</label>\n                  <input\n                    name=\"car_model\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={carInput.car_model}\n                    onChange={handleInput}\n                  ></input>\n                  <label>Your car model year:</label>\n                  <input\n                    name=\"car_model_year\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={carInput.car_model_year}\n                    onChange={handleInput}\n                  ></input>\n                  <label>Your car color:</label>\n                  <input\n                    name=\"car_color\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={carInput.car_color}\n                    onChange={handleInput}\n                  ></input>\n                  <label>Your car price:</label>\n                  <input\n                    name=\"price\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={carInput.price}\n                    onChange={handleInput}\n                  ></input>\n                  <button\n                    className=\"create-btn\"\n                    onClick={() => {\n                      addNewListing(rootStore, carInput);\n                      toggleListingWindow();\n                    }}\n                  >\n                    Create\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default observer(NewListing);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport FilterSection from \"../Components/HomeComponents/FilterSectionComponents/FilterSection\";\nimport ListingsSection from \"../Components/HomeComponents/ListingsSectionComponents/ListingsSection\";\nimport NewListing from \"../Components/HomeComponents/NewListing\";\nimport \"./Home.css\";\n\nconst Home = () => {\n  useEffect(() => {\n    fetch(\"https://localhost:3500\", {\n      method: \"GET\",\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  return (\n    <>\n    <div className=\"top\">\n    <h1 className=\"h1 home-h1\">Find your dream car</h1>\n      <NewListing />\n    </div>\n      <div className=\"hero-section\">\n        <FilterSection />\n        <ListingsSection />\n      </div>\n    </>\n  )\n}\n\nexport default observer(Home);\n"],"names":["rootStore","sortFilterPagingStore","resetDefaultPage","params","sortData","getFilteredData","dataStore","token","tokenStore","query","callApi","result","data","runInAction","console","log","observer","React","RootContext","className","onClick","handleSortFilterAndPages","resetFilterState","resetSortData","getCarData","error","resetData","filterData","setFilterData","makeParams","handleData","e","prop","target","name","value","labelText","labelPlaceholder","map","category","type","id","placeholder","onChange","htmlFor","changePages","setPreviousPage","page","response","item","length","setNextPage","carId","status","alert","props","deleteSingleListing","setSortValue","carEditInput","useState","editIsOpened","setEditIsOpened","toggleListingWindow","carData","car","price","car_color","car_model","car_model_year","car_vin","availability","date_added","setCarEditInput","handleInput","a","Number","editListing","setSortData","useEffect","undefined","elem","to","role","carInput","windowIsOpened","setwindowIsOpened","setCarInput","tabIndex","addNewListing","fetch","method","then","json","catch"],"sourceRoot":""}