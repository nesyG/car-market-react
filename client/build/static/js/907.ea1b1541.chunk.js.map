{"version":3,"file":"static/js/907.ea1b1541.chunk.js","mappings":"wLAGA,IAAKA,EAAAA,SACD,MAAM,IAAIC,MAAM,qDAEpB,IAAKC,EAAAA,GACD,MAAM,IAAID,MAAM,sE,aCLd,SAAUE,EAAiBC,GAC7BA,GACJ,CCFM,SAAUC,EAAgBC,GAC5B,OAAOC,EAAAA,EAAAA,IAAkBD,EAC7B,CCIA,IAAME,EAC8B,qBAAzBC,0BAAuCC,EAAYD,qBCPxD,SAAUE,EAAmBC,GAO/B,MANwC,CACpCA,SAAQ,EACRC,SAAS,EACTC,oBAAoB,EACpBC,QAASC,KAAKC,MAAQC,EAG9B,CAwDO,IAAMA,EAAwC,I,kTC7D/C,MAKFC,ECCE,SACFV,GAEA,IAAMW,EAAoC,IAAIC,IAC1CC,EAA6B,EAE3BC,EAAW,IAAId,GAAqB,SAAyBe,GAC/D,IAAMC,EAAkBL,EAAkCM,IAAIF,GAC1DC,IACAA,EAAgBb,SAASe,UACzBP,EAAkCQ,OAAOJ,GAEjD,IAEA,MAAO,CACHK,mBAAA,SACIC,EACAlB,EACAmB,GAEA,IAAMP,EAAQF,IAOd,OALAC,EAASS,SAASD,EAAuBP,EAAOM,GAChDA,EAAoBG,QAAUtB,EAAmBC,GACjDkB,EAAoBG,QAAQC,iCAAmCV,EAC/DJ,EAAkCe,IAAIX,EAAOM,EAAoBG,SAE1DH,EAAoBG,OAC/B,EACAG,0BAAA,SAA0BC,GACtBd,EAASe,WAAWD,GAEhBA,EAAYJ,SAAWI,EAAYJ,QAAQC,kCAC3Cd,EAAkCQ,OAC9BS,EAAYJ,QAAQC,iCAGhC,EACAK,kCAAiC,WAC7B,EAEJC,6BAA4B,WACxB,EAGZ,CD7CMC,CAAuDtB,GEAvD,WAIF,IAKIuB,EALEC,EAAiF,IAAIC,IAuC3F,SAASC,SACyBnC,IAA1BgC,IACAA,EAAwBI,WAAWC,EHeN,KGbrC,CAmBA,SAASA,IACLL,OAAwBhC,EAKxB,IAAMO,EAAMD,KAAKC,MACjB0B,EAAwBK,SAAQ,SAAAC,GAC5B,IAAMC,EAAWD,EAAIhB,QACjBiB,GACIjC,GAAOiC,EAASnC,UAEhBmC,EAAStC,SAASe,UAClBsB,EAAIhB,QAAU,KACdU,EAAwBf,OAAOqB,GAG3C,IAEIN,EAAwBQ,KAAO,GAG/BN,GAER,CAEA,MAAO,CACHhB,mBAAA,SACIC,EACAlB,EAKAmB,GAnDR,IACIkB,EAsDI,OAFAnB,EAAoBG,QAAUtB,EAAmBC,GApDrDqC,EAqDsCnB,EAnDtCa,EAAwBS,IAAIH,GAE5BJ,IAkDWf,EAAoBG,OAC/B,EACAG,0BAjDJ,SACIC,GAEAM,EAAwBf,OAAOS,EACnC,EA8CIE,kCA5FJ,WAGQG,IACAW,aAAaX,GACbK,IAER,EAsFIP,6BAnFJ,W,QACI,GAAIG,EAAwBQ,KAAO,EAAG,C,IAClC,IAAkB,QAAAR,GAAuB,8BAAE,CAAtC,IAAMM,EAAG,QACJC,EAAWD,EAAIhB,QACjBiB,IACAA,EAAStC,SAASe,UAClBsB,EAAIhB,QAAU,K,mGAGtBU,EAAwBW,O,CAGxBZ,IACAW,aAAaX,GACbA,OAAwBhC,EAEhC,EAqEJ,CF7GM6C,GANF1B,EAAkB,qBAClBO,EAAyB,4BGPzBoB,GHQ4B,+BACK,qCGTF,GAM7B,SAAUC,IACZ,OAAOD,CACX,C,+RCEA,SAASE,EAAyBC,GAC9B,MAAO,kBAAWA,EACtB,CAKA,iBAAiC,EAEjC,SAASC,IACL,OAAO,IAAIC,CACf,CAEM,SAAUC,EAAeC,EAAaJ,GACxC,QADwC,IAAAA,IAAAA,EAAAA,YACpCF,IACA,OAAOM,IAGL,IAAChC,EAAD,EAA0BiC,EAAAA,SAAeJ,GAAiC,GAApD,GAEnBK,EAAH,EAAeD,EAAAA,WAAgB,GAApB,GACXE,EAAc,WAAM,OAAAD,EAAS,GAAT,EAKpBnC,EAAsBkC,EAAAA,OAAuC,MAEnE,IAAKlC,EAAoBG,QAIrB,IAAMkC,EAAc,IAAIC,EAAAA,GAASV,EAAyBC,IAAoB,WAMtEU,EAAaxD,QAEbqD,IAIAG,EAAavD,oBAAqB,CAE1C,IAEMuD,EAAexC,EACjBC,EACAqC,EACApC,GAIA,IA6CJuC,EACAC,EA9CI3D,EAAakB,EAAoBG,QAAQ,SAuDjD,GAtDA+B,EAAAA,cAAoBpD,EAAUP,GAE9B2D,EAAAA,WAAgB,WAiCZ,OA/BA5B,EAA0BN,GAEtBA,EAAoBG,SAIpBH,EAAoBG,QAAQpB,SAAU,EAElCiB,EAAoBG,QAAQnB,qBAC5BgB,EAAoBG,QAAQnB,oBAAqB,EACjDoD,OASJpC,EAAoBG,QAAU,CAC1BrB,SAAU,IAAIwD,EAAAA,GAASV,EAAyBC,IAAoB,WAEhEO,GACJ,IACArD,SAAS,EACTC,oBAAoB,EACpBC,QAASyD,KAEbN,KAGG,WACHpC,EAAoBG,QAASrB,SAASe,UACtCG,EAAoBG,QAAU,IAClC,CACJ,GAAG,IAOHrB,EAAS6D,OAAM,WACX,IACIH,EAAYP,G,CACd,MAAOW,GACLH,EAAYG,C,CAEpB,IAEIH,EACA,MAAMA,EAGV,OAAOD,CACX,CCxHA,IAEMK,EAA8B,oBAAXC,QAAyBA,OAAOC,IAEnDC,EAAwBH,EACxBC,OAAOC,IAAI,qBACW,oBAAfE,EAAAA,aAA6BA,EAAAA,EAAAA,aAAW,SAACC,GAAe,eAAgB,SAE/EC,EAAkBN,EAClBC,OAAOC,IAAI,cACK,oBAATK,EAAAA,OAAuBA,EAAAA,EAAAA,OAAK,SAACF,GAAe,eAAgB,SA4CnE,SAAUG,EACZC,EAKAC,G,MASA,GAAIJ,GAAmBG,EAAwB,WAAMH,EACjD,MAAM,IAAIhF,MACN,uLAKR,GAAIwD,IACA,OAAO2B,EAGX,IAAIE,EAAmC,QAAnB,EAAO,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASN,kBAAU,SACnCQ,EAASH,EAEPzB,EAAoByB,EAAcI,aAAeJ,EAAcK,KAIrE,GAAIX,GAAyBM,EAAwB,WAAMN,IACvDQ,GAAgB,EAEM,oBADtBC,EAASH,EAAsB,SAE3B,MAAM,IAAInF,MACN,wEAKZ,IAyD0ByF,EAAWC,EAzDjCC,EAAoB,SAACZ,EAAY/B,GACjC,OAAOa,GAAY,WAAM,OAAAyB,EAAOP,EAAO/B,EAAd,GAAoBU,EACjD,EAyCA,MArC0B,KAAtBA,IACEiC,EAA8CJ,YAAc7B,GAI7DyB,EAAsBS,eACrBD,EAA8CC,aAC5CT,EACFS,cAGFP,IAIAM,GAAoBb,EAAAA,EAAAA,YAAWa,IAMnCA,GAAoBV,EAAAA,EAAAA,MAAKU,GA8BCF,EA5BLN,EA4BgBO,EA5BDC,EA6BpCE,OAAOC,KAAKL,GAAM1C,SAAQ,SAAAgD,GACjBC,EAAeD,IAChBF,OAAOI,eAAeP,EAAQK,EAAKF,OAAOK,yBAAyBT,EAAMM,GAEjF,IAnBOJ,CACX,CAGA,IAAMK,EAAsB,CACxBG,UAAU,EACVb,QAAQ,EACRc,SAAS,EACTC,MAAM,EAGNd,aAAa,G,ITtJgBe,KUEhBC,EAAAA,2BVATD,EAAoBpG,IAOxBsG,EAAAA,EAAAA,IAAU,CAAEF,kBAAiB,IWfjC,IAAIG,EAAW,EAUf,IAAMC,EAAiB,CAAC,E,SACRC,EAAUnB,GAItB,OAHKkB,EAAelB,KAChBkB,EAAelB,GAZvB,SAAsBA,GAClB,GAAsB,oBAAXb,OACP,OAAOA,OAAOa,GAElB,IAAMoB,EAAS,iBAAiBpB,EAApB,KAA6BiB,EAA7B,IAEZ,OADAA,IACOG,CACV,CAK8BC,CAAarB,IAEjCkB,EAAelB,EACzB,C,SAEesB,EAAaC,EAAWC,GAEpC,GAAIC,EAAGF,EAAMC,GACT,OAAO,EAEX,GAAoB,kBAATD,GAA8B,OAATA,GAAiC,kBAATC,GAA8B,OAATA,EACzE,OAAO,EAEX,IAAME,EAAQrB,OAAOC,KAAKiB,GACpBI,EAAQtB,OAAOC,KAAKkB,GAC1B,GAAIE,EAAME,SAAWD,EAAMC,OACvB,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAME,OAAQC,IAC9B,IAAKxB,OAAOyB,eAAeC,KAAKP,EAAME,EAAMG,MAAQJ,EAAGF,EAAKG,EAAMG,IAAKL,EAAKE,EAAMG,KAC9E,OAAO,EAGf,OAAO,CACV,CAED,SAASJ,EAAGO,EAAQC,GAEhB,OAAID,IAAMC,EACO,IAAND,GAAW,EAAIA,IAAM,EAAIC,EAEzBD,IAAMA,GAAKC,IAAMA,CAE/B,C,SAmCeC,EAAchC,EAAgBiC,EAAWC,GAChD/B,OAAOyB,eAAeC,KAAK7B,EAAQiC,GAQpCjC,EAAOiC,GAAQC,EAPf/B,OAAOI,eAAeP,EAAQiC,EAAM,CAChCE,YAAY,EACZC,cAAc,EACdC,UAAU,EACVH,MAAAA,GAKX,CAMD,IAAMI,EAAarB,EAAU,eACvBsB,EAAwBtB,EAAU,qBAexC,SAASuB,EAAQC,EAAsBC,G,kCAAmBC,EAAAA,IAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAEtDD,EAAOE,QAEP,IACI,IAAIC,EAKJ,YAJmB9H,IAAf0H,GAA2C,OAAfA,IAC5BI,EAASJ,EAAWK,MAAMC,KAAMJ,IAG7BE,CAQV,CAdD,QAQIH,EAAOE,QACc,IAAjBF,EAAOE,OACPF,EAAOM,QAAQ3F,SAAQ,SAAA4F,GACnBA,EAAGH,MAAMI,EAAMP,EAClB,GAER,CACJ,CAED,SAASQ,EAAaV,EAAsBC,GAIxC,OAHW,W,2BAAaC,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GACpBH,EAAQX,KAAR,MAAAW,EAAO,CAAMO,KAAMN,EAAYC,GAAxB,OAAmCC,GAC7C,CAEJ,C,SAEeS,EAAMpD,EAAgBqD,EAAoBC,GACtD,IAAMZ,EArCV,SAAmB1C,EAAgBqD,GAC/B,IAAMX,EAAU1C,EAAOsC,GAActC,EAAOsC,IAAe,CAAC,EACtDiB,EAAgBb,EAAOW,GAAcX,EAAOW,IAAe,CAAC,EAGlE,OAFAE,EAAaX,MAAQW,EAAaX,OAAS,EAC3CW,EAAaP,QAAUO,EAAaP,SAAW,GACxCO,CACV,CA+BkBC,CAAUxD,EAAQqD,GAE7BX,EAAOM,QAAQS,QAAQH,GAAe,GACtCZ,EAAOM,QAAQU,KAAKJ,GAGxB,IAAMK,EAAgBxD,OAAOK,yBAAyBR,EAAQqD,GAC9D,IAAIM,IAAiBA,EAAcpB,GAAnC,CAKA,IAAMqB,EAAiB5D,EAAOqD,GACxBQ,EAAgBC,EAClB9D,EACAqD,EACAM,EAAgBA,EAAcxB,gBAAapH,EAC3C2H,EACAkB,GAGJzD,OAAOI,eAAeP,EAAQqD,EAAYQ,EAXzC,CAYJ,CAED,SAASC,EACL9D,EACAqD,EACAlB,EACAO,EACAkB,G,MAEIG,EAAcZ,EAAaS,EAAgBlB,GAE/C,OAAO,EAAP,IACKH,IAAwB,EAD7B,EAEIxG,IAAK,WACD,OAAOgI,CACV,EAJL,EAKIvH,IAAK,SAAU0F,GACX,GAAIa,OAAS/C,EACT+D,EAAcZ,EAAajB,EAAOQ,OAC/B,CAKH,IAAMmB,EAAgBC,EAAiBf,KAAMM,EAAYlB,EAAYO,EAAQR,GAC7E/B,OAAOI,eAAewC,KAAMM,EAAYQ,EAC3C,CACJ,EAhBL,EAiBIzB,cAAc,EAjBlB,EAkBID,WAAYA,EAlBhB,CAoBH,CCvLD,IAAM6B,EAAoBC,EAAAA,IAAS,QAC7BC,EAAuBjD,EAAU,uBACjCkD,EAAkBlD,EAAU,eAC5BmD,EAAgBnD,EAAU,cAC1BoD,EAAqBpD,EAAU,mBAErC,SAAgBqD,EACZC,GAEA,IAAMvE,EAASuE,EAAeC,UAE9B,GAAID,EAAeL,GAAuB,CACtC,IAAMrE,EAAc4E,EAAezE,GACnC0E,QAAQC,KAAR,iCACqC9E,EADrC,yEAIH,MACG0E,EAAeL,IAAwB,EAG3C,GAAIlE,EAAO4E,mBACP,MAAM,IAAItK,MAAM,kEAEpB,GAAIiK,EAAc,YAAkBM,EAAAA,cAChC,GAAK7E,EAAO8E,uBAEL,GAAI9E,EAAO8E,wBAA0BC,EAExC,MAAM,IAAIzK,MACN,qFAJJ0F,EAAO8E,sBAAwBC,EAavCC,EAAmBhF,EAAQ,SAC3BgF,EAAmBhF,EAAQ,SACvBuE,EAAeU,aACfD,EAAmBhF,EAAQ,WAG/B,IAAMkF,EAAiBlF,EAAOJ,OAC9B,GAA8B,oBAAnBsF,EAA+B,CACtC,IAAMrF,EAAc4E,EAAezE,GACnC,MAAM,IAAI1F,MACN,iCAAiCuF,EAAjC,wKAIP,CAqCD,OApCAG,EAAOJ,OAAS,WAIZ,OAHAmD,KAAKnD,OAAS9B,IACRoH,EACAC,EAAqBtD,KAAKkB,KAAMmC,GAC/BnC,KAAKnD,QACf,EACDwD,EAAMpD,EAAQ,qBAAqB,WAC/B+C,KAAKoB,IAAmB,EACnBpB,KAAKnD,OAAOoE,IAGboB,EAAAA,UAAAA,UAAAA,YAAAA,KAAqCrC,KAE5C,IACDK,EAAMpD,EAAQ,wBAAwB,WAClC,IAAIlC,IAAJ,CAIA,IAAM7C,EAAW8H,KAAKnD,OAAOoE,GAC7B,GAAI/I,EACAA,EAASe,UAET+G,KAAKnD,OAAOoE,GAAqB,SAC9B,CAEH,IAAMnE,EAAc4E,EAAe1B,MACnC2B,QAAQC,KAAR,uDAC2D9E,EAD3D,wKAKH,CAEDkD,KAAKoB,IAAmB,CAjBvB,CAkBJ,IACMI,CACV,CAGD,SAASE,EAAeY,GACpB,OACIA,EAAKxF,aACLwF,EAAKvF,MACJuF,EAAKC,cAAgBD,EAAKC,YAAYzF,aAAewF,EAAKC,YAAYxF,OACvE,aAEP,CAED,SAASqF,EAAqBD,G,WAK1BlD,EAAce,KAAMqB,GAAe,GAKnCpC,EAAce,KAAMsB,GAAoB,GAExC,IAAMkB,EAAcd,EAAe1B,MAC7ByC,EAAsBN,EAAeO,KAAK1C,MAE5C2C,GAAqB,EAqDzB,OArBA,SAASC,I,MACLD,GAAqB,EAErB,IAAMzK,EAAQ,OAAI,EAAA0K,EAAe3B,IAAnB,EAAI2B,EAAe3B,GAjCd,WACnB,IAAM/I,EAAW,IAAIwD,EAAAA,GAAY8G,EAAhB,aAAwC,WACrD,IAAKG,IAIDA,GAAqB,GACS,IAA1BxC,EAAKiB,IAA2B,CAChC,IAAIyB,GAAW,EACf,IACI5D,EAAckB,EAAMmB,GAAoB,GACnCnB,EAAKkB,IACNgB,EAAAA,UAAAA,UAAAA,YAAAA,KAAqClC,GAEzC0C,GAAW,CAQd,CAbD,QAOI5D,EAAckB,EAAMmB,GAAoB,GACpCuB,IACA3K,EAASe,UAETkH,EAAKtD,OAAOoE,GAAqB,KAExC,CACJ,CAER,IAED,OADA/I,EAAQ,eAAqBiI,EACtBjI,CACV,CAK2D4K,GACpDjH,OAAqB7D,EACrB4D,OAAY5D,EAUhB,GATAE,EAAS6D,OAAM,WACX,IAGIH,GAAYmH,EAAAA,EAAAA,KAAmB,EAAON,EAGzC,CAFC,MAAOzG,GACLH,EAAYG,CACf,CACJ,IACGH,EACA,MAAMA,EAEV,OAAOD,CACV,CAGJ,CAED,SAASoG,EAAYgB,EAAuCC,GAOxD,OANIlI,KACA4G,QAAQC,KACJ,mLAIJ5B,KAAKkD,QAAUD,IAOX5E,EAAa2B,KAAK1D,MAAO0G,EACpC,CAED,SAASf,EAAmBhF,EAAakG,GACrC,IAAMC,EAAiBlF,EAAU,aAAaiF,EAAd,gBAC1BE,EAAgBnF,EAAU,aAAaiF,EAAd,eAC/B,SAASG,IAIL,OAHKtD,KAAKqD,IACNpE,EAAce,KAAMqD,GAAeE,EAAAA,EAAAA,IAAW,YAAcJ,IAEzDnD,KAAKqD,EACf,CACDjG,OAAOI,eAAeP,EAAQkG,EAAU,CACpC9D,cAAc,EACdD,YAAY,EACZpG,IAAK,WACD,IAAIwK,GAAgB,EAepB,OAXIC,EAAAA,IAAyBC,EAAAA,KACzBF,GAAgBC,EAAAA,EAAAA,KAAsB,IAE1CH,EAAQxE,KAAKkB,MAAM2D,iBAIfF,EAAAA,IAAyBC,EAAAA,KACzBA,EAAAA,EAAAA,IAAoBF,GAGjBxD,KAAKoD,EACf,EACD3J,IAAK,SAAa7B,GACToI,KAAKsB,IAAwBjD,EAAa2B,KAAKoD,GAAiBxL,GAMjEqH,EAAce,KAAMoD,EAAgBxL,IALpCqH,EAAce,KAAMoD,EAAgBxL,GACpCqH,EAAce,KAAMqB,GAAe,GACnCiC,EAAQxE,KAAKkB,MAAM4D,gBACnB3E,EAAce,KAAMqB,GAAe,GAI1C,GAER,CC5OD,SAAgB5E,EAAoCoH,GAOhD,OANoC,IAAhCA,EAAS,gBACTlC,QAAQC,KACJ,8IAKJxE,OAAOqE,UAAUqC,cAAchF,KAAKxD,EAAAA,UAAiBuI,IACrDzG,OAAOqE,UAAUqC,cAAchF,KAAKxD,EAAAA,cAAqBuI,GAGlDtC,EAA2BsC,GAG3BE,EAAaF,EAE3B,CCvBD,IAAKxB,EAAAA,UAAW,MAAM,IAAI9K,MAAM,6CAChC,IAAKyM,EAAAA,GAAY,MAAM,IAAIzM,MAAM,2C","sources":["../node_modules/mobx-react-lite/src/utils/assertEnvironment.ts","../node_modules/mobx-react-lite/src/utils/observerBatching.ts","../node_modules/mobx-react-lite/src/utils/printDebugValue.ts","../node_modules/mobx-react-lite/src/utils/FinalizationRegistryWrapper.ts","../node_modules/mobx-react-lite/src/utils/reactionCleanupTrackingCommon.ts","../node_modules/mobx-react-lite/src/utils/reactionCleanupTracking.ts","../node_modules/mobx-react-lite/src/utils/createReactionCleanupTrackingUsingFinalizationRegister.ts","../node_modules/mobx-react-lite/src/utils/createTimerBasedReactionCleanupTracking.ts","../node_modules/mobx-react-lite/src/staticRendering.ts","../node_modules/mobx-react-lite/src/useObserver.ts","../node_modules/mobx-react-lite/src/observer.ts","../node_modules/mobx-react-lite/src/index.ts","../node_modules/mobx-react/src/utils/utils.ts","../node_modules/mobx-react/src/observerClass.ts","../node_modules/mobx-react/src/observer.tsx","../node_modules/mobx-react/src/index.ts"],"sourcesContent":["import { makeObservable } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!makeObservable) {\n    throw new Error(\"mobx-react-lite@3 requires mobx at least version 6 to be available\")\n}\n","import { configure } from \"mobx\"\n\nexport function defaultNoopBatch(callback: () => void) {\n    callback()\n}\n\nexport function observerBatching(reactionScheduler: any) {\n    if (!reactionScheduler) {\n        reactionScheduler = defaultNoopBatch\n        if (\"production\" !== process.env.NODE_ENV) {\n            console.warn(\n                \"[MobX] Failed to get unstable_batched updates from react-dom / react-native\"\n            )\n        }\n    }\n    configure({ reactionScheduler })\n}\n\nexport const isObserverBatched = () => {\n    if (\"production\" !== process.env.NODE_ENV) {\n        console.warn(\"[MobX] Deprecated\")\n    }\n\n    return true\n}\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","declare class FinalizationRegistryType<T> {\n    constructor(cleanup: (cleanupToken: T) => void)\n    register(object: object, cleanupToken: T, unregisterToken?: object): void\n    unregister(unregisterToken: object): void\n}\n\ndeclare const FinalizationRegistry: typeof FinalizationRegistryType | undefined\n\nconst FinalizationRegistryLocal =\n    typeof FinalizationRegistry === \"undefined\" ? undefined : FinalizationRegistry\n\nexport { FinalizationRegistryLocal as FinalizationRegistry }\n","import { Reaction } from \"mobx\"\n\nexport function createTrackingData(reaction: Reaction) {\n    const trackingData: IReactionTracking = {\n        reaction,\n        mounted: false,\n        changedBeforeMount: false,\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS\n    }\n    return trackingData\n}\n\n/**\n * Unified api for timers/Finalization registry cleanups\n * This abstraction make useObserver much simpler\n */\nexport interface ReactionCleanupTracking {\n    /**\n     *\n     * @param reaction The reaction to cleanup\n     * @param objectRetainedByReact This will be in actual use only when FinalizationRegister is in use\n     */\n    addReactionToTrack(\n        reactionTrackingRef: React.MutableRefObject<IReactionTracking | null>,\n        reaction: Reaction,\n        objectRetainedByReact: object\n    ): IReactionTracking\n    recordReactionAsCommitted(reactionRef: React.MutableRefObject<IReactionTracking | null>): void\n    forceCleanupTimerToRunNowForTests(): void\n    resetCleanupScheduleForTests(): void\n}\n\nexport interface IReactionTracking {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction\n    /**\n     * The time (in ticks) at which point we should dispose of the reaction\n     * if this component hasn't yet been fully mounted.\n     */\n    cleanAt: number\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount: boolean\n\n    /**\n     * In case we are using finalization registry based cleanup,\n     * this will hold the cleanup token associated with this reaction\n     */\n    finalizationRegistryCleanupToken?: number\n}\n\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10_000\n\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10_000\n","import { FinalizationRegistry as FinalizationRegistryMaybeUndefined } from \"./FinalizationRegistryWrapper\"\nimport { createReactionCleanupTrackingUsingFinalizationRegister } from \"./createReactionCleanupTrackingUsingFinalizationRegister\"\nimport { createTimerBasedReactionCleanupTracking } from \"./createTimerBasedReactionCleanupTracking\"\nexport { IReactionTracking } from \"./reactionCleanupTrackingCommon\"\n\nconst {\n    addReactionToTrack,\n    recordReactionAsCommitted,\n    resetCleanupScheduleForTests,\n    forceCleanupTimerToRunNowForTests\n} = FinalizationRegistryMaybeUndefined\n    ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryMaybeUndefined)\n    : createTimerBasedReactionCleanupTracking()\n\nexport {\n    addReactionToTrack,\n    recordReactionAsCommitted,\n    resetCleanupScheduleForTests,\n    forceCleanupTimerToRunNowForTests\n}\n","import { FinalizationRegistry as FinalizationRegistryMaybeUndefined } from \"./FinalizationRegistryWrapper\"\nimport { Reaction } from \"mobx\"\nimport {\n    ReactionCleanupTracking,\n    IReactionTracking,\n    createTrackingData\n} from \"./reactionCleanupTrackingCommon\"\n\n/**\n * FinalizationRegistry-based uncommitted reaction cleanup\n */\nexport function createReactionCleanupTrackingUsingFinalizationRegister(\n    FinalizationRegistry: NonNullable<typeof FinalizationRegistryMaybeUndefined>\n): ReactionCleanupTracking {\n    const cleanupTokenToReactionTrackingMap = new Map<number, IReactionTracking>()\n    let globalCleanupTokensCounter = 1\n\n    const registry = new FinalizationRegistry(function cleanupFunction(token: number) {\n        const trackedReaction = cleanupTokenToReactionTrackingMap.get(token)\n        if (trackedReaction) {\n            trackedReaction.reaction.dispose()\n            cleanupTokenToReactionTrackingMap.delete(token)\n        }\n    })\n\n    return {\n        addReactionToTrack(\n            reactionTrackingRef: React.MutableRefObject<IReactionTracking | null>,\n            reaction: Reaction,\n            objectRetainedByReact: object\n        ) {\n            const token = globalCleanupTokensCounter++\n\n            registry.register(objectRetainedByReact, token, reactionTrackingRef)\n            reactionTrackingRef.current = createTrackingData(reaction)\n            reactionTrackingRef.current.finalizationRegistryCleanupToken = token\n            cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current)\n\n            return reactionTrackingRef.current\n        },\n        recordReactionAsCommitted(reactionRef: React.MutableRefObject<IReactionTracking | null>) {\n            registry.unregister(reactionRef)\n\n            if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {\n                cleanupTokenToReactionTrackingMap.delete(\n                    reactionRef.current.finalizationRegistryCleanupToken\n                )\n            }\n        },\n        forceCleanupTimerToRunNowForTests() {\n            // When FinalizationRegistry in use, this this is no-op\n        },\n        resetCleanupScheduleForTests() {\n            // When FinalizationRegistry in use, this this is no-op\n        }\n    }\n}\n","import { Reaction } from \"mobx\"\nimport {\n    ReactionCleanupTracking,\n    IReactionTracking,\n    CLEANUP_TIMER_LOOP_MILLIS,\n    createTrackingData\n} from \"./reactionCleanupTrackingCommon\"\n\n/**\n * timers, gc-style, uncommitted reaction cleanup\n */\nexport function createTimerBasedReactionCleanupTracking(): ReactionCleanupTracking {\n    /**\n     * Reactions created by components that have yet to be fully mounted.\n     */\n    const uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\n\n    /**\n     * Latest 'uncommitted reactions' cleanup timer handle.\n     */\n    let reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\n\n    /* istanbul ignore next */\n    /**\n     * Only to be used by test functions; do not export outside of mobx-react-lite\n     */\n    function forceCleanupTimerToRunNowForTests() {\n        // This allows us to control the execution of the cleanup timer\n        // to force it to run at awkward times in unit tests.\n        if (reactionCleanupHandle) {\n            clearTimeout(reactionCleanupHandle)\n            cleanUncommittedReactions()\n        }\n    }\n\n    /* istanbul ignore next */\n    function resetCleanupScheduleForTests() {\n        if (uncommittedReactionRefs.size > 0) {\n            for (const ref of uncommittedReactionRefs) {\n                const tracking = ref.current\n                if (tracking) {\n                    tracking.reaction.dispose()\n                    ref.current = null\n                }\n            }\n            uncommittedReactionRefs.clear()\n        }\n\n        if (reactionCleanupHandle) {\n            clearTimeout(reactionCleanupHandle)\n            reactionCleanupHandle = undefined\n        }\n    }\n\n    function ensureCleanupTimerRunning() {\n        if (reactionCleanupHandle === undefined) {\n            reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\n        }\n    }\n\n    function scheduleCleanupOfReactionIfLeaked(\n        ref: React.MutableRefObject<IReactionTracking | null>\n    ) {\n        uncommittedReactionRefs.add(ref)\n\n        ensureCleanupTimerRunning()\n    }\n\n    function recordReactionAsCommitted(\n        reactionRef: React.MutableRefObject<IReactionTracking | null>\n    ) {\n        uncommittedReactionRefs.delete(reactionRef)\n    }\n\n    /**\n     * Run by the cleanup timer to dispose any outstanding reactions\n     */\n    function cleanUncommittedReactions() {\n        reactionCleanupHandle = undefined\n\n        // Loop through all the candidate leaked reactions; those older\n        // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n        const now = Date.now()\n        uncommittedReactionRefs.forEach(ref => {\n            const tracking = ref.current\n            if (tracking) {\n                if (now >= tracking.cleanAt) {\n                    // It's time to tidy up this leaked reaction.\n                    tracking.reaction.dispose()\n                    ref.current = null\n                    uncommittedReactionRefs.delete(ref)\n                }\n            }\n        })\n\n        if (uncommittedReactionRefs.size > 0) {\n            // We've just finished a round of cleanups but there are still\n            // some leak candidates outstanding.\n            ensureCleanupTimerRunning()\n        }\n    }\n\n    return {\n        addReactionToTrack(\n            reactionTrackingRef: React.MutableRefObject<IReactionTracking | null>,\n            reaction: Reaction,\n            /**\n             * On timer based implementation we don't really need this object,\n             * but we keep the same api\n             */\n            objectRetainedByReact: unknown\n        ) {\n            reactionTrackingRef.current = createTrackingData(reaction)\n            scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\n            return reactionTrackingRef.current\n        },\n        recordReactionAsCommitted,\n        forceCleanupTimerToRunNowForTests,\n        resetCleanupScheduleForTests\n    }\n}\n","let globalIsUsingStaticRendering = false\n\nexport function enableStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\nimport { printDebugValue } from \"./utils/printDebugValue\"\nimport {\n    addReactionToTrack,\n    IReactionTracking,\n    recordReactionAsCommitted\n} from \"./utils/reactionCleanupTracking\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\nclass ObjectToBeRetainedByReact {}\n\nfunction objectToBeRetainedByReactFactory() {\n    return new ObjectToBeRetainedByReact()\n}\n\nexport function useObserver<T>(fn: () => T, baseComponentName: string = \"observed\"): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    const [objectRetainedByReact] = React.useState(objectToBeRetainedByReactFactory)\n    // Force update, see #2982\n    const [, setState] = React.useState()\n    const forceUpdate = () => setState([] as any)\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const reactionTrackingRef = React.useRef<IReactionTracking | null>(null)\n\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n\n        const newReaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.\n                trackingData.changedBeforeMount = true\n            }\n        })\n\n        const trackingData = addReactionToTrack(\n            reactionTrackingRef,\n            newReaction,\n            objectRetainedByReact\n        )\n    }\n\n    const { reaction } = reactionTrackingRef.current!\n    React.useDebugValue(reaction, printDebugValue)\n\n    React.useEffect(() => {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef)\n\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true\n            // Got a change before first mount, force an update\n            if (reactionTrackingRef.current.changedBeforeMount) {\n                reactionTrackingRef.current.changedBeforeMount = false\n                forceUpdate()\n            }\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This can be due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up\n\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), () => {\n                    // We've definitely already been mounted at this point\n                    forceUpdate()\n                }),\n                mounted: true,\n                changedBeforeMount: false,\n                cleanAt: Infinity\n            }\n            forceUpdate()\n        }\n\n        return () => {\n            reactionTrackingRef.current!.reaction.dispose()\n            reactionTrackingRef.current = null\n        }\n    }, [])\n\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    let rendering!: T\n    let exception\n    reaction.track(() => {\n        try {\n            rendering = fn()\n        } catch (e) {\n            exception = e\n        }\n    })\n\n    if (exception) {\n        throw exception // re-throw any exceptions caught during rendering\n    }\n\n    return rendering\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nlet warnObserverOptionsDeprecated = true\n\nconst hasSymbol = typeof Symbol === \"function\" && Symbol.for\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nconst ReactForwardRefSymbol = hasSymbol\n    ? Symbol.for(\"react.forward_ref\")\n    : typeof forwardRef === \"function\" && forwardRef((props: any) => null)[\"$$typeof\"]\n\nconst ReactMemoSymbol = hasSymbol\n    ? Symbol.for(\"react.memo\")\n    : typeof memo === \"function\" && memo((props: any) => null)[\"$$typeof\"]\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.ForwardRefRenderFunction<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.ForwardRefExoticComponent<\n        React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n    >\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.ForwardRefRenderFunction<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.ForwardRefRenderFunction<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent:\n        | React.ForwardRefRenderFunction<TRef, P>\n        | React.FunctionComponent<P>\n        | React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>,\n    // TODO remove in next major\n    options?: IObserverOptions\n) {\n    if (process.env.NODE_ENV !== \"production\" && warnObserverOptionsDeprecated && options) {\n        warnObserverOptionsDeprecated = false\n        console.warn(\n            `[mobx-react-lite] \\`observer(fn, { forwardRef: true })\\` is deprecated, use \\`observer(React.forwardRef(fn))\\``\n        )\n    }\n\n    if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n        throw new Error(\n            `[mobx-react-lite] You are trying to use \\`observer\\` on a function component wrapped in either another \\`observer\\` or \\`React.memo\\`. The observer already applies 'React.memo' for you.`\n        )\n    }\n\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    let useForwardRef = options?.forwardRef ?? false\n    let render = baseComponent\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    // If already wrapped with forwardRef, unwrap,\n    // so we can patch render and apply memo\n    if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n        useForwardRef = true\n        render = baseComponent[\"render\"]\n        if (typeof render !== \"function\") {\n            throw new Error(\n                `[mobx-react-lite] \\`render\\` property of ForwardRef was not a function`\n            )\n        }\n    }\n\n    let observerComponent = (props: any, ref: React.Ref<TRef>) => {\n        return useObserver(() => render(props, ref), baseComponentName)\n    }\n\n    // Don't set `displayName` for anonymous components,\n    // so the `displayName` can be customized by user, see #3192.\n    if (baseComponentName !== \"\") {\n        ;(observerComponent as React.FunctionComponent).displayName = baseComponentName\n    }\n\n    // Support legacy context: `contextTypes` must be applied before `memo`\n    if ((baseComponent as any).contextTypes) {\n        ;(observerComponent as React.FunctionComponent).contextTypes = (\n            baseComponent as any\n        ).contextTypes\n    }\n\n    if (useForwardRef) {\n        // `forwardRef` must be applied prior `memo`\n        // `forwardRef(observer(cmp))` throws:\n        // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n        observerComponent = forwardRef(observerComponent)\n    }\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    observerComponent = memo(observerComponent)\n\n    copyStaticProperties(baseComponent, observerComponent)\n\n    if (\"production\" !== process.env.NODE_ENV) {\n        Object.defineProperty(observerComponent, \"contextTypes\", {\n            set() {\n                throw new Error(\n                    `[mobx-react-lite] \\`${\n                        this.displayName || this.type?.displayName || \"Component\"\n                    }.contextTypes\\` must be set before applying \\`observer\\`.`\n                )\n            }\n        })\n    }\n\n    return observerComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true,\n    // Don't redefine `displayName`,\n    // it's defined as getter-setter pair on `memo` (see #3192).\n    displayName: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import \"./utils/assertEnvironment\"\n\nimport { unstable_batchedUpdates as batch } from \"./utils/reactBatchedUpdates\"\nimport { observerBatching } from \"./utils/observerBatching\"\nimport { useDeprecated } from \"./utils/utils\"\nimport { useObserver as useObserverOriginal } from \"./useObserver\"\nimport { enableStaticRendering } from \"./staticRendering\"\n\nobserverBatching(batch)\n\nexport { isUsingStaticRendering, enableStaticRendering } from \"./staticRendering\"\nexport { observer, IObserverOptions } from \"./observer\"\nexport { Observer } from \"./ObserverComponent\"\nexport { useLocalObservable } from \"./useLocalObservable\"\nexport { useLocalStore } from \"./useLocalStore\"\nexport { useAsObservableSource } from \"./useAsObservableSource\"\nexport { resetCleanupScheduleForTests as clearTimers } from \"./utils/reactionCleanupTracking\"\n\nexport function useObserver<T>(fn: () => T, baseComponentName: string = \"observed\"): T {\n    if (\"production\" !== process.env.NODE_ENV) {\n        useDeprecated(\n            \"[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`.\"\n        )\n    }\n    return useObserverOriginal(fn, baseComponentName)\n}\n\nexport { isObserverBatched, observerBatching } from \"./utils/observerBatching\"\n\nexport function useStaticRendering(enable: boolean) {\n    if (\"production\" !== process.env.NODE_ENV) {\n        console.warn(\n            \"[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead\"\n        )\n    }\n    enableStaticRendering(enable)\n}\n","let symbolId = 0\nfunction createSymbol(name: string): symbol | string {\n    if (typeof Symbol === \"function\") {\n        return Symbol(name)\n    }\n    const symbol = `__$mobx-react ${name} (${symbolId})`\n    symbolId++\n    return symbol\n}\n\nconst createdSymbols = {}\nexport function newSymbol(name: string): symbol | string {\n    if (!createdSymbols[name]) {\n        createdSymbols[name] = createSymbol(name)\n    }\n    return createdSymbols[name]\n}\n\nexport function shallowEqual(objA: any, objB: any): boolean {\n    //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (is(objA, objB)) {\n        return true\n    }\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false\n    }\n    const keysA = Object.keys(objA)\n    const keysB = Object.keys(objB)\n    if (keysA.length !== keysB.length) {\n        return false\n    }\n    for (let i = 0; i < keysA.length; i++) {\n        if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n            return false\n        }\n    }\n    return true\n}\n\nfunction is(x: any, y: any): boolean {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y\n    } else {\n        return x !== x && y !== y\n    }\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList = {\n    $$typeof: 1,\n    render: 1,\n    compare: 1,\n    type: 1,\n    childContextTypes: 1,\n    contextType: 1,\n    contextTypes: 1,\n    defaultProps: 1,\n    getDefaultProps: 1,\n    getDerivedStateFromError: 1,\n    getDerivedStateFromProps: 1,\n    mixins: 1,\n    displayName: 1,\n    propTypes: 1\n}\n\nexport function copyStaticProperties(base: object, target: object): void {\n    const protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base))\n    Object.getOwnPropertyNames(base).forEach(key => {\n        if (!hoistBlackList[key] && protoProps.indexOf(key) === -1) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n\n/**\n * Helper to set `prop` to `this` as non-enumerable (hidden prop)\n * @param target\n * @param prop\n * @param value\n */\nexport function setHiddenProp(target: object, prop: any, value: any): void {\n    if (!Object.hasOwnProperty.call(target, prop)) {\n        Object.defineProperty(target, prop, {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value\n        })\n    } else {\n        target[prop] = value\n    }\n}\n\n/**\n * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks\n * and the handler provided by mobx-react\n */\nconst mobxMixins = newSymbol(\"patchMixins\")\nconst mobxPatchedDefinition = newSymbol(\"patchedDefinition\")\n\nexport interface Mixins extends Record<string, any> {\n    locks: number\n    methods: Array<Function>\n}\n\nfunction getMixins(target: object, methodName: string): Mixins {\n    const mixins = (target[mobxMixins] = target[mobxMixins] || {})\n    const methodMixins = (mixins[methodName] = mixins[methodName] || {})\n    methodMixins.locks = methodMixins.locks || 0\n    methodMixins.methods = methodMixins.methods || []\n    return methodMixins\n}\n\nfunction wrapper(realMethod: Function, mixins: Mixins, ...args: Array<any>) {\n    // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls\n    mixins.locks++\n\n    try {\n        let retVal\n        if (realMethod !== undefined && realMethod !== null) {\n            retVal = realMethod.apply(this, args)\n        }\n\n        return retVal\n    } finally {\n        mixins.locks--\n        if (mixins.locks === 0) {\n            mixins.methods.forEach(mx => {\n                mx.apply(this, args)\n            })\n        }\n    }\n}\n\nfunction wrapFunction(realMethod: Function, mixins: Mixins): (...args: Array<any>) => any {\n    const fn = function (...args: Array<any>) {\n        wrapper.call(this, realMethod, mixins, ...args)\n    }\n    return fn\n}\n\nexport function patch(target: object, methodName: string, mixinMethod: Function): void {\n    const mixins = getMixins(target, methodName)\n\n    if (mixins.methods.indexOf(mixinMethod) < 0) {\n        mixins.methods.push(mixinMethod)\n    }\n\n    const oldDefinition = Object.getOwnPropertyDescriptor(target, methodName)\n    if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {\n        // already patched definition, do not repatch\n        return\n    }\n\n    const originalMethod = target[methodName]\n    const newDefinition = createDefinition(\n        target,\n        methodName,\n        oldDefinition ? oldDefinition.enumerable : undefined,\n        mixins,\n        originalMethod\n    )\n\n    Object.defineProperty(target, methodName, newDefinition)\n}\n\nfunction createDefinition(\n    target: object,\n    methodName: string,\n    enumerable: any,\n    mixins: Mixins,\n    originalMethod: Function\n): PropertyDescriptor {\n    let wrappedFunc = wrapFunction(originalMethod, mixins)\n\n    return {\n        [mobxPatchedDefinition]: true,\n        get: function () {\n            return wrappedFunc\n        },\n        set: function (value) {\n            if (this === target) {\n                wrappedFunc = wrapFunction(value, mixins)\n            } else {\n                // when it is an instance of the prototype/a child prototype patch that particular case again separately\n                // since we need to store separate values depending on wether it is the actual instance, the prototype, etc\n                // e.g. the method for super might not be the same as the method for the prototype which might be not the same\n                // as the method for the instance\n                const newDefinition = createDefinition(this, methodName, enumerable, mixins, value)\n                Object.defineProperty(this, methodName, newDefinition)\n            }\n        },\n        configurable: true,\n        enumerable: enumerable\n    }\n}\n","import { PureComponent, Component } from \"react\"\nimport {\n    createAtom,\n    _allowStateChanges,\n    Reaction,\n    $mobx,\n    _allowStateReadsStart,\n    _allowStateReadsEnd\n} from \"mobx\"\nimport { isUsingStaticRendering } from \"mobx-react-lite\"\n\nimport { newSymbol, shallowEqual, setHiddenProp, patch } from \"./utils/utils\"\n\nconst mobxAdminProperty = $mobx || \"$mobx\" // BC\nconst mobxObserverProperty = newSymbol(\"isMobXReactObserver\")\nconst mobxIsUnmounted = newSymbol(\"isUnmounted\")\nconst skipRenderKey = newSymbol(\"skipRender\")\nconst isForcingUpdateKey = newSymbol(\"isForcingUpdate\")\n\nexport function makeClassComponentObserver(\n    componentClass: React.ComponentClass<any, any>\n): React.ComponentClass<any, any> {\n    const target = componentClass.prototype\n\n    if (componentClass[mobxObserverProperty]) {\n        const displayName = getDisplayName(target)\n        console.warn(\n            `The provided component class (${displayName})\n                has already been declared as an observer component.`\n        )\n    } else {\n        componentClass[mobxObserverProperty] = true\n    }\n\n    if (target.componentWillReact) {\n        throw new Error(\"The componentWillReact life-cycle event is no longer supported\")\n    }\n    if (componentClass[\"__proto__\"] !== PureComponent) {\n        if (!target.shouldComponentUpdate) {\n            target.shouldComponentUpdate = observerSCU\n        } else if (target.shouldComponentUpdate !== observerSCU) {\n            // n.b. unequal check, instead of existence check, as @observer might be on superclass as well\n            throw new Error(\n                \"It is not allowed to use shouldComponentUpdate in observer based components.\"\n            )\n        }\n    }\n\n    // this.props and this.state are made observable, just to make sure @computed fields that\n    // are defined inside the component, and which rely on state or props, re-compute if state or props change\n    // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)\n    // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+\n    makeObservableProp(target, \"props\")\n    makeObservableProp(target, \"state\")\n    if (componentClass.contextType) {\n        makeObservableProp(target, \"context\")\n    }\n\n    const originalRender = target.render\n    if (typeof originalRender !== \"function\") {\n        const displayName = getDisplayName(target)\n        throw new Error(\n            `[mobx-react] class component (${displayName}) is missing \\`render\\` method.` +\n                `\\n\\`observer\\` requires \\`render\\` being a function defined on prototype.` +\n                `\\n\\`render = () => {}\\` or \\`render = function() {}\\` is not supported.`\n        )\n    }\n    target.render = function () {\n        this.render = isUsingStaticRendering()\n            ? originalRender\n            : createReactiveRender.call(this, originalRender)\n        return this.render()\n    }\n    patch(target, \"componentDidMount\", function () {\n        this[mobxIsUnmounted] = false\n        if (!this.render[mobxAdminProperty]) {\n            // Reaction is re-created automatically during render, but a component can re-mount and skip render #3395.\n            // To re-create the reaction and re-subscribe to relevant observables we have to force an update.\n            Component.prototype.forceUpdate.call(this)\n        }\n    })\n    patch(target, \"componentWillUnmount\", function () {\n        if (isUsingStaticRendering()) {\n            return\n        }\n\n        const reaction = this.render[mobxAdminProperty]\n        if (reaction) {\n            reaction.dispose()\n            // Forces reaction to be re-created on next render\n            this.render[mobxAdminProperty] = null\n        } else {\n            // Render may have been hot-swapped and/or overridden by a subclass.\n            const displayName = getDisplayName(this)\n            console.warn(\n                `The reactive render of an observer class component (${displayName})\n                was overridden after MobX attached. This may result in a memory leak if the\n                overridden reactive render was not properly disposed.`\n            )\n        }\n\n        this[mobxIsUnmounted] = true\n    })\n    return componentClass\n}\n\n// Generates a friendly name for debugging\nfunction getDisplayName(comp: any) {\n    return (\n        comp.displayName ||\n        comp.name ||\n        (comp.constructor && (comp.constructor.displayName || comp.constructor.name)) ||\n        \"<component>\"\n    )\n}\n\nfunction createReactiveRender(originalRender: any) {\n    /**\n     * If props are shallowly modified, react will render anyway,\n     * so atom.reportChanged() should not result in yet another re-render\n     */\n    setHiddenProp(this, skipRenderKey, false)\n    /**\n     * forceUpdate will re-assign this.props. We don't want that to cause a loop,\n     * so detect these changes\n     */\n    setHiddenProp(this, isForcingUpdateKey, false)\n\n    const initialName = getDisplayName(this)\n    const boundOriginalRender = originalRender.bind(this)\n\n    let isRenderingPending = false\n\n    const createReaction = () => {\n        const reaction = new Reaction(`${initialName}.render()`, () => {\n            if (!isRenderingPending) {\n                // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.test.tsx)\n                // This unidiomatic React usage but React will correctly warn about this so we continue as usual\n                // See #85 / Pull #44\n                isRenderingPending = true\n                if (this[mobxIsUnmounted] !== true) {\n                    let hasError = true\n                    try {\n                        setHiddenProp(this, isForcingUpdateKey, true)\n                        if (!this[skipRenderKey]) {\n                            Component.prototype.forceUpdate.call(this)\n                        }\n                        hasError = false\n                    } finally {\n                        setHiddenProp(this, isForcingUpdateKey, false)\n                        if (hasError) {\n                            reaction.dispose()\n                            // Forces reaction to be re-created on next render\n                            this.render[mobxAdminProperty] = null\n                        }\n                    }\n                }\n            }\n        })\n        reaction[\"reactComponent\"] = this\n        return reaction\n    }\n\n    function reactiveRender() {\n        isRenderingPending = false\n        // Create reaction lazily to support re-mounting #3395\n        const reaction = (reactiveRender[mobxAdminProperty] ??= createReaction())\n        let exception: unknown = undefined\n        let rendering = undefined\n        reaction.track(() => {\n            try {\n                // TODO@major\n                // Optimization: replace with _allowStateChangesStart/End (not available in mobx@6.0.0)\n                rendering = _allowStateChanges(false, boundOriginalRender)\n            } catch (e) {\n                exception = e\n            }\n        })\n        if (exception) {\n            throw exception\n        }\n        return rendering\n    }\n\n    return reactiveRender\n}\n\nfunction observerSCU(nextProps: React.ClassAttributes<any>, nextState: any): boolean {\n    if (isUsingStaticRendering()) {\n        console.warn(\n            \"[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.\"\n        )\n    }\n    // update on any state changes (as is the default)\n    if (this.state !== nextState) {\n        return true\n    }\n    // update if props are shallowly not equal, inspired by PureRenderMixin\n    // we could return just 'false' here, and avoid the `skipRender` checks etc\n    // however, it is nicer if lifecycle events are triggered like usually,\n    // so we return true here if props are shallowly modified.\n    return !shallowEqual(this.props, nextProps)\n}\n\nfunction makeObservableProp(target: any, propName: string): void {\n    const valueHolderKey = newSymbol(`reactProp_${propName}_valueHolder`)\n    const atomHolderKey = newSymbol(`reactProp_${propName}_atomHolder`)\n    function getAtom() {\n        if (!this[atomHolderKey]) {\n            setHiddenProp(this, atomHolderKey, createAtom(\"reactive \" + propName))\n        }\n        return this[atomHolderKey]\n    }\n    Object.defineProperty(target, propName, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            let prevReadState = false\n\n            // Why this check? BC?\n            // @ts-expect-error\n            if (_allowStateReadsStart && _allowStateReadsEnd) {\n                prevReadState = _allowStateReadsStart(true)\n            }\n            getAtom.call(this).reportObserved()\n\n            // Why this check? BC?\n            // @ts-expect-error\n            if (_allowStateReadsStart && _allowStateReadsEnd) {\n                _allowStateReadsEnd(prevReadState)\n            }\n\n            return this[valueHolderKey]\n        },\n        set: function set(v) {\n            if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {\n                setHiddenProp(this, valueHolderKey, v)\n                setHiddenProp(this, skipRenderKey, true)\n                getAtom.call(this).reportChanged()\n                setHiddenProp(this, skipRenderKey, false)\n            } else {\n                setHiddenProp(this, valueHolderKey, v)\n            }\n        }\n    })\n}\n","import * as React from \"react\"\nimport { observer as observerLite } from \"mobx-react-lite\"\n\nimport { makeClassComponentObserver } from \"./observerClass\"\nimport { IReactComponent } from \"./types/IReactComponent\"\n\n/**\n * Observer function / decorator\n */\nexport function observer<T extends IReactComponent>(component: T): T {\n    if (component[\"isMobxInjector\"] === true) {\n        console.warn(\n            \"Mobx observer: You are trying to use `observer` on a component that already has `inject`. Please apply `observer` before applying `inject`\"\n        )\n    }\n\n    if (\n        Object.prototype.isPrototypeOf.call(React.Component, component) ||\n        Object.prototype.isPrototypeOf.call(React.PureComponent, component)\n    ) {\n        // Class component\n        return makeClassComponentObserver(component as React.ComponentClass<any, any>) as T\n    } else {\n        // Function component\n        return observerLite(component as React.FunctionComponent<any>) as T\n    }\n}\n","import { observable } from \"mobx\"\nimport { Component } from \"react\"\n\nif (!Component) throw new Error(\"mobx-react requires React to be available\")\nif (!observable) throw new Error(\"mobx-react requires mobx to be available\")\n\nexport {\n    Observer,\n    useObserver,\n    useAsObservableSource,\n    useLocalStore,\n    isUsingStaticRendering,\n    useStaticRendering,\n    enableStaticRendering,\n    observerBatching,\n    useLocalObservable\n} from \"mobx-react-lite\"\n\nexport { observer } from \"./observer\"\n\nexport { MobXProviderContext, Provider, ProviderProps } from \"./Provider\"\nexport { inject } from \"./inject\"\nexport { disposeOnUnmount } from \"./disposeOnUnmount\"\nexport { PropTypes } from \"./propTypes\"\nexport { IWrappedComponent } from \"./types/IWrappedComponent\"\n"],"names":["useState","Error","makeObservable","defaultNoopBatch","callback","printDebugValue","v","getDependencyTree","FinalizationRegistryLocal","FinalizationRegistry","undefined","createTrackingData","reaction","mounted","changedBeforeMount","cleanAt","Date","now","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","FinalizationRegistryMaybeUndefined","cleanupTokenToReactionTrackingMap","Map","globalCleanupTokensCounter","registry","token","trackedReaction","get","dispose","delete","addReactionToTrack","reactionTrackingRef","objectRetainedByReact","register","current","finalizationRegistryCleanupToken","set","recordReactionAsCommitted","reactionRef","unregister","forceCleanupTimerToRunNowForTests","resetCleanupScheduleForTests","createReactionCleanupTrackingUsingFinalizationRegister","reactionCleanupHandle","uncommittedReactionRefs","Set","ensureCleanupTimerRunning","setTimeout","cleanUncommittedReactions","forEach","ref","tracking","size","add","clearTimeout","clear","createTimerBasedReactionCleanupTracking","globalIsUsingStaticRendering","isUsingStaticRendering","observerComponentNameFor","baseComponentName","objectToBeRetainedByReactFactory","ObjectToBeRetainedByReact","useObserver","fn","React","setState","forceUpdate","newReaction","Reaction","trackingData_1","rendering","exception","Infinity","track","e","hasSymbol","Symbol","for","ReactForwardRefSymbol","forwardRef","props","ReactMemoSymbol","memo","observer","baseComponent","options","useForwardRef","render","displayName","name","base","target","observerComponent","contextTypes","Object","keys","key","hoistBlackList","defineProperty","getOwnPropertyDescriptor","$$typeof","compare","type","reactionScheduler","batch","configure","symbolId","createdSymbols","newSymbol","symbol","createSymbol","shallowEqual","objA","objB","is","keysA","keysB","length","i","hasOwnProperty","call","x","y","setHiddenProp","prop","value","enumerable","configurable","writable","mobxMixins","mobxPatchedDefinition","wrapper","realMethod","mixins","args","locks","retVal","apply","this","methods","mx","_this","wrapFunction","patch","methodName","mixinMethod","methodMixins","getMixins","indexOf","push","oldDefinition","originalMethod","newDefinition","createDefinition","wrappedFunc","mobxAdminProperty","$mobx","mobxObserverProperty","mobxIsUnmounted","skipRenderKey","isForcingUpdateKey","makeClassComponentObserver","componentClass","prototype","getDisplayName","console","warn","componentWillReact","PureComponent","shouldComponentUpdate","observerSCU","makeObservableProp","contextType","originalRender","createReactiveRender","Component","comp","constructor","initialName","boundOriginalRender","bind","isRenderingPending","reactiveRender","hasError","createReaction","_allowStateChanges","nextProps","nextState","state","propName","valueHolderKey","atomHolderKey","getAtom","createAtom","prevReadState","_allowStateReadsStart","_allowStateReadsEnd","reportObserved","reportChanged","component","isPrototypeOf","observerLite","observable"],"sourceRoot":""}